ПОДДЕРЖИВАЕМЫЙ ФУНКЦИОНАЛ:

1. Реализована библиотека academy.js, реализующая интерфейс в соответствии с заданием.
2. Реализована сериализация/десериализация в json.
3. Добавлены тесты к библиотеке academy.js.
4. Реализован консольный интерфейс к библиотеке.



ОСОБЕННОСТИ РЕАЛИЗАЦИИ:

1. Для написания тестов к библиотеке использовались библиотеки mocha.js и chai.js
2. Сериализация/десериализация в формат JSON реализована с помощью стандартных функций javascript - JSON.stringify и JSON.parse.
3. В библиотеке реализованы проверки входных параметров во всех публичных методах - если они не корректны, выбрасывается ошибка в вызывающий код.
4. Консольный интерфейс реализован в виде интерпретатора команд, в котором, после выполнения очередной команды, происходит запрос новой команды пока не будет введена команда выхода. Список доступных команд можно посмотреть вызовом команды "help" или в файле Help.txt.
5. После запуска приложения объект для работы с академией не содержит данных, для их заполнение нужно выполнить соответствующие команды или импорт данных из JSON файла. Перед завершением работы с программой, для сохранения данных, нужно выполнить их экспорт в JSON файл. Для заполнения тестовых данных можно воспользоваться командой "filltest" или импортом из JSON файла с тестовыми данными: "import json testdata.json".
6. Библиотека работает с идентификаторами объектов, которые возвращаются при их создании, так же их можно посмотреть, выполнив команды отображения списка объектов (см. справку в файле Help.txt).



РАЗВЕРТЫВАНИЕ ПРИЛОЖЕНИЯ:

1. Для работы приложения необходимо установить Node.JS с пакетным менеджером NPM.
2. Перейти в папку с приложением.
3. Выполнить команду npm install для установки зависимостей.
4. Команду "npm start" или "node index.js" для запуска.
5. Для выполнения тестов выполнить "npm test" или "mocha" (пакет mocha должен быть установлен).



АЛГОРИТМ РАСПРЕДЕЛЕНИЯ СТУДЕНТОВ ПО КОМАНДАМ:

1. Входные данные представлены:
	- рейтинг ментора: идентификатор ментора и упорядоченный список студентов, 
	  в котором рейтинг равен индексу студента в массиве + 1, 
	  наивысший рейтинг соответствует 1, наименьший - кол-ву студентов;
	- рейтинг студента: идентификатор студента и упорядоченный список менторов, 
	  в котором рейтинг равен индексу ментора в массиве + 1, 
	  наивысший рейтинг соответствует 1, наименьший - кол-ву менторов;

2. Строится матрица, каждый элемент, которой представлен парой рейтинг студента / рейтинг ментора, также у элемента есть идентификатор студента и ментора.

3. Для каждого элемента рассчитывается два показателя, по которым будет происходить распределение:
	- РЕЙТИНГ СТУДЕНТА * РЕЙТИНГ МЕНТОРА * МОДУЛЬ РАЗНИЦЫ РЕЙТИНГОВ - описание ниже.
	- РЕЙТИНГ МЕНТОРА - РЕЙТИНГ СТУДЕНТА - описание ниже.

4. Создаем линейный список всех элементов, который сортируем сначала по первому показателю, далее если первый показатель у элементов одинаковый, сортируем по второму показателю. Сортировка по второму показателю: сначала те, у кого модуль показателя ближе к 0, если у нескольких элементов этот показатель по модулю одинаковый, сначала те элементы у кого этот показатель отрицательный, потом положительный.

5. Далее, с начала отсортированного списка, удовлетворяем соответствие каждого последующего элемента при условии наличия свободного места в команде ментора. Если места нет, то данный студент к этому ментору так и не попадет, поскольку у этого ментора нашлись более приоритетные студенты, которые заняли все места, возможно он попадет к другому ментору при последующей обработке. При этом, когда мы выделяем место для студента, то все последующие элементы, в которых он числится, мы помечаем обработанными и в дальнейшем пропускаем их.

6. Обработку продолжаем до тех пор, пока в командах есть свободные места или пока не обработаны все элементы соответствий ментора и студента.


РЕЙТИНГ СТУДЕНТА * РЕЙТИНГ МЕНТОРА * МОДУЛЬ РАЗНИЦЫ РЕЙТИНГОВ: умножение рейтингов студена и ментора позволит оценить общий рейтинг, так чем произведение будет меньше, тем данное соответствие находится выше по шкале рейтингов и весомее и это соответствие будет наиболее приоритетно для удовлетворения, напротив если произведение большое, то ни студент, ни ментор не хотят связываться друг с другом, что означает, что данное соответствие будет в самом конце очереди на обработку. В данном случае мы используем умножение, а не сумму, что бы повысить значимость показателя и по максимуму дифференцировать его. Дополнительное умножение этого показателя на модуль разницы рейтингов, позволит учесть степень согласованности рейтинга студента и ментора, при этом если разница равно 0, то умножаем на 1.


РЕЙТИНГ МЕНТОРА - РЕЙТИНГ СТУДЕНТА: данный показатель показывает насколько сходятся предпочтения студента и ментора. Чем он ближе к 0, тем расхождений меньше. Так, например, если у студента ментор в приоритете 3, и у ментора студент в приоритете 3, то разница равна 0 и их интересы совпадают. Противоположная ситуация, когда например, у студента ментор в рейтинге 1, что означает что он хочет попасть именно к нему. Напротив, у этого ментора, студент в рейтинге 10, что означает, что он совсем не хочет видеть его в своей команде. При этом если мы удовлетворим данную ячейку и выделим место для этого студента у этого ментора, то мы пренебрегаем интересами ментора и пойдем на встречу студенту. При этом если данный показатель имеет знак "минус", то это означает что, рейтинг студента у ментора выше, чем рейтинг ментора у студента и, удовлетворяя данное соответствие мы идем навстречу ментору, пренебрегая интересом студента. Если разница будет положительной, то обратная ситуация, мы идем на встречу студенту, пренебрегая интересами ментора. Так как задача состоит в том, что бы максимально учесть интересы всех участников, пары соответствия с разницей наиболее приближенной к 0, будут обрабатываться в первую очередь. Выбирая между интересами ментора или студента, в случае одинакового первого показателя, мы отдаем предпочтение ментору, поскольку студентов больше чем менторов, и места могут быть ограничены, т. е. в первую очередь мы обрабатываем соответствие со знаком "минус". Итак, приоритет обработки данного показателя, сначала выделяем места для тех соответствий, у которых разница ближе к 0, если таких несколько, сначала обрабатывает разницу со знаком "минус", затем со знаком "плюс".



  

